import numpy as np

# Berechnung der Koordinaten (in Pixel)
#x_p_prime = np.array([989, 1062, 1047, 1421, 1454, 1554, 1626, 1530, 1528, 1127, 1110, 1033, 1201, 1278, 1523, 1536, 1351, 1257, 1087, 1079,
                      #1090, 1201, 1339, 1672, 1760, 1722, 1464, 1334, 1199, 943, 890, 918, 922, 1561, 1684, 1006, 719, 914, 1468, 1845, 1962,
                      #1667, 1066, 781, 521, 691, 1672, 2019, 2219, 1949, 880, 631])

#y_p_prime = np.array([1389, 1371, 1300, 1197, 1284, 1272, 1697, 1725, 1812, 1830, 1742, 1744, 1327, 1302, 1443, 1554, 1767, 1766, 1597, 1514,
                      #1192, 1112, 1126, 1325, 1456, 1611, 1916, 1971, 1923, 1693, 1583, 1465, 1277, 1125, 1839, 1880, 1349, 1034, 894, 1117,
                      #1753, 2099, 2126, 1865, 1181, 908, 640, 839, 1989, 2288, 2336, 2091])

x_p_prime = np.array([1289, 1364, 1360, 1739, 1762, 1862, 1875, 1776, 1762, 1363, 1363, 1283, 1507, 1579, 1807, 1810, 1597, 1507, 1360, 1362,
                      1414, 1535, 1672, 1974, 2039, 1983, 1689, 1548, 1422, 1200, 1161, 1205, 1236, 1891, 1913, 1236, 1205, 1262, 1830, 2175,
                      2204, 1859, 1262, 1017, 850, 1057, 2069, 2388, 2430, 2115, 1048, 834])

y_p_prime = np.array([1665, 1660, 1589, 1538, 1623, 1623, 2058, 2072, 2158, 2121, 2030, 2018, 1638, 1623, 1793, 1908, 2086, 2075, 1884, 1803,
                      1482, 1416, 1450, 1695, 1835, 1985, 2248, 2286, 2222, 1958, 1843, 1730, 1543, 1478, 2205, 2152, 1585, 1302, 1239, 1516,
                      2169, 2462, 2402, 2104, 1390, 1147, 1016, 1260, 2431, 2684, 2583, 2309])

#x_o_prime = 1295
#y_o_prime = 1542

x_o_prime = 1562
y_o_prime = 1849

xy_err = 10

x_p = x_p_prime - x_o_prime
y_p = y_p_prime - y_o_prime
x_p_err = np.sqrt((xy_err)**2 + (xy_err)**2)
y_p_err = np.sqrt((xy_err)**2 + (xy_err)**2)

# Umrechnungs-Faktoren
c_1 = 2382/57
c_1_err = np.sqrt((10/57)**2 + (2382/(57**2) * 1)**2)
c_2 = 3182/76
c_2_err = np.sqrt((10/76)**2 + (3182/(76**2) * 1)**2)

# fehlergewichtetes Mittel
c = ((c_1/(c_1_err**2)) + (c_2/(c_2_err**2)))/((1/(c_1_err**2)) + (1/c_2_err**2))
c_err = 1/np.sqrt((1/(c_1_err**2)) + (1/(c_2_err**2)))

# berechne z_q
z_q = np.sqrt(x_p**2 + y_p**2 + (c*15)**2) - c*15
z_q_err = np.sqrt(((x_p * x_p_err)/(np.sqrt(x_p**2 + y_p**2 + (c*11)**2)))**2 + ((y_p * y_p_err)/(np.sqrt(x_p**2 + y_p**2 + (c*15)**2)))**2  
                  + (((c**2 * 15)/(np.sqrt(x_p**2 + y_p**2 + (c*15)**2)) - c) * 2)**2 + (((c * 15**2)/(np.sqrt(x_p**2 + y_p**2 + (c*15)**2)) - 15) * c_err)**2)

print(x_p, y_p, x_p_err, y_p_err)
print(c_1, c_1_err, c_2, c_2_err)
print(c, c_err)
print(z_q, z_q_err)